apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion gradle_build_versions.compileSdkVersion

    defaultConfig {
        applicationId "${package_name}"
        minSdkVersion gradle_build_versions.minSdkVersion
        targetSdkVersion gradle_build_versions.targetSdkVersion

        versionCode app_version_code.toInteger()
        versionName app_version_name.toString().trim()

        println("versionName：" + app_version_name.toString().trim())
        println("versionCode：" + app_version_code.toInteger())

        // Enabling multidex support.
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "PACKAGE_NAME", "\"${package_name}\"")

        manifestPlaceholders = [
                "PACKAGE_NAME": "${package_name}"
        ]
    }


    signingConfigs {
        debug {
            keyAlias 'Lulu'
            keyPassword '941007zll'
            storeFile file('sign.jks')
            storePassword '941007zll'
        }
        release {
            keyAlias 'Lulu'
            keyPassword '941007zll'
            storeFile file('sign.jks')
            storePassword '941007zll'
        }

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("Boolean", "isPluginSourceBuild", "$isPluginSourceBuild")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release //问题出在这里，打包没有应用签名
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    repositories {
        flatDir {
            dirs '../app/libs/'
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    //打包重命名
    applicationVariants.all { variant ->
        //def flavorName = variant.getFlavorName()
        //def variantName = variant.name.capitalize()
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "HotSearch_v${defaultConfig.versionName}_${variant.name}_${releaseTime()}.apk"
                outputFileName = fileName
            }
        }
    }

}

def releaseTime() {
    //GMT+8是因为北京时间和GMT有8个小时时差。
    return new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+8"))
    //return System.currentTimeMillis()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'

    api(name: 'BaseRecyclerViewAdapterHelper-2.9.30', ext: 'aar')
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'


    implementation 'com.google.code.gson:gson:2.4'
    implementation project(':PageList')
    implementation project(':Basic')
    implementation project(":YWRouter_Android")
    //implementation project(":PluginBusiness")
    if (!isSourceBuildZebra.toBoolean()) {
        implementation project(':zebra_core')
    }
    if (isPluginSourceBuild.toBoolean()) {
        implementation project(':PluginLibs:TestPlugin')
    }

    kapt 'com.alibaba:arouter-compiler:1.5.1'

    def room_version = "2.2.6"
    kapt "androidx.room:room-compiler:$room_version"
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

//统一编译库
task uniteUploadArchives {
    doLast {
        println "统一编译执行结束"
    }

}

uniteUploadArchives.dependsOn ":lib_provider_build_base:uploadArchives"
uniteUploadArchives.dependsOn ":lib_provider_build_compiler:uploadArchives"
uniteUploadArchives.dependsOn ":zebra_core:uploadArchives"
uniteUploadArchives.dependsOn ":zebra_building:uploadArchives"


apply plugin: 'bugly'
bugly {
    appId = '1b2b486e59' // 注册时分配的App ID
    appKey = '795b77e3-a82a-427a-bfc5-c3bd281c1b9d' // 注册时分配的App Key
}
