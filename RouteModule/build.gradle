apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

def config = rootProject.ext.android
def libraries = rootProject.ext.dependencies

android {
    // 编译SDK的版本
    compileSdkVersion config.compileSdkVersion

    publishNonDefault true

    defaultConfig {
        //minSDk
        minSdkVersion config.minSdkVersion
        //targetSdk
        targetSdkVersion config.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            consumerProguardFiles 'proguard.cfg'
        }
        release_with_sign {
            consumerProguardFiles 'proguard.cfg'
        }
    }
    flavorDimensions "normal"
    productFlavors{
        cofree{
            dimension 'normal'
        }
    }
    sourceSets {
        debug.setRoot('src/debug')
        release.setRoot('src/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
kapt {
    arguments {
        arg("moduleName", project.getName())
    }
}
dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')

    //ARouter依赖
    kapt libraries.arouterCompiler
    api libraries.arouterApi

    api project(':EntityModule')
    // 单元测试依赖
    testImplementation libraries.junit
    testImplementation libraries.mockitoCore//请勿随意升级版本号，会影响单元测试使用
    testImplementation libraries.powermockModule
    testImplementation libraries.powermockApi
    androidTestImplementation(libraries.espressoCore , {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation libraries.yuewenCoreModule
    implementation libraries.yuewenCommonModule
    implementation project( ':StatisticsModule')
}
